from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
from aiogram.utils.deep_linking import decode_payload, create_start_link

from bot.lexicon.lexicon_ru import LEXICON, USER_ROLES
from bot.models.data_store import (
    register_user, get_user_data, get_orders_count, get_user_role,
    get_referrals
)
from bot.keyboards.menu_keyboards import (
    create_main_menu_keyboard, create_referral_menu_keyboard
)
from bot.states.states import ApplicationStates

router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(event: Message | CallbackQuery, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    user_id = event.from_user.id
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if not get_user_data(user_id):
        register_user(user_id, event.from_user.username)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é
    role_key = get_user_role(user_id)
    role_display = USER_ROLES.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    orders_count = get_orders_count(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID
    text = LEXICON["main_menu_text"].format(
        user_id=user_id,
        role=role_display,
        orders_count=orders_count
    )

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–æ–ª—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω. –æ–ø—Ü–∏–∏"
    keyboard = create_main_menu_keyboard(role_key)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    elif isinstance(event, CallbackQuery):
        try:
            # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode="Markdown"
            await event.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
        await event.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    args = message.text.split()
    referrer_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏)
    if len(args) > 1:
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload. –¢–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º create_start_link —Å encode=True,
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å decode_payload.
            payload = decode_payload(args[1])
            if payload.startswith("ref_"):
                referrer_id = int(payload.split("_")[1])
        except Exception:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            pass

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user(message.from_user.id, message.from_user.username, referrer_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu –∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" (–µ—Å–ª–∏ –±—ã –æ–Ω–∞ –±—ã–ª–∞ –Ω–µ Inline)
@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    await show_main_menu(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await show_main_menu(callback, state)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" (/task)
@router.message(Command("task"))
@router.callback_query(F.data == "menu_create_task")
async def create_task_handler(event: Message | CallbackQuery, state: FSMContext):
    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    await state.set_state(ApplicationStates.choosing_service)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É FSM
    from bot.keyboards.fsm_keyboards import get_service_choice_keyboard
    keyboard = get_service_choice_keyboard()
    text = LEXICON["fsm_start_prompt"]

    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard)
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" (/cases) - –ó–∞–≥–ª—É—à–∫–∞
@router.message(Command("cases"))
@router.callback_query(F.data == "menu_my_cases")
async def my_cases_handler(event: Message | CallbackQuery):
    text = LEXICON["my_cases_placeholder"]
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

    if isinstance(event, Message):
        await event.answer(text)
    elif isinstance(event, CallbackQuery):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (alert)
        await event.answer(text, show_alert=True)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" (/referral)
@router.message(Command("referral"))
@router.callback_query(F.data == "menu_referral")
async def referral_handler(event: Message | CallbackQuery, bot: Bot):
    user_id = event.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç Aiogram.
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º payload "ref_{user_id}" –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º encode=True –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    # –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É https://t.me/MyBot?start=<encoded_payload>
    link = await create_start_link(bot, f"ref_{user_id}", encode=True)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è Markdown –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (backticks)
    text = LEXICON["referral_link_text"].format(referral_link=link)
    keyboard = create_referral_menu_keyboard()

    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    elif isinstance(event, CallbackQuery):
        # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode="Markdown"
        await event.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await event.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã üìä"
@router.callback_query(F.data == "referral_my_referrals")
async def my_referrals_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    referrals = get_referrals(user_id)

    if not referrals:
        text = LEXICON["no_referrals_yet"]
    else:
        text = LEXICON["my_referrals_title"] + "\n\n"
        for i, ref in enumerate(referrals, 1):
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º username –∏–ª–∏ ID, –µ—Å–ª–∏ username –Ω–µ—Ç
            display_name = f"@{ref.get('username')}" if ref.get('username') else f"ID: {ref['user_id']}"
            text += f"{i}. {display_name}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
    await callback.answer(text, show_alert=True)