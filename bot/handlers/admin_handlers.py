from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.lexicon.lexicon_ru import LEXICON
from bot.models.data_store import get_all_users, grant_admin_role, users_db
from bot.keyboards.menu_keyboards import (
    create_admin_menu_keyboard, create_back_to_admin_keyboard
)
from bot.states.states import AdminStates
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
from bot.filters.roles import IsAdmin, IsMainAdmin

router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä IsAdmin –∫–æ –≤—Å–µ–º—É —Ä–æ—É—Ç–µ—Ä—É. –í—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∏–∂–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def show_admin_menu(event: Message | CallbackQuery, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ ID)
    text = LEXICON["admin_menu_title"]
    keyboard = create_admin_menu_keyboard()

    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard)
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /admin –∏ –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω. –æ–ø—Ü–∏–∏"
@router.message(Command("admin"))
@router.callback_query(F.data == "menu_admin")
async def admin_menu_handler(event: Message | CallbackQuery, state: FSMContext):
    await show_admin_menu(event, state)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•"
@router.callback_query(F.data == "admin_list_users")
async def list_users_handler(callback: CallbackQuery):
    users = get_all_users()
    if not users:
        text = "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = LEXICON["admin_list_users_title"].format(count=len(users))
        for user in users:
            display_name = f"@{user.get('username')}" if user.get('username') else "–ë–µ–∑ –Ω–∏–∫–∞"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è ID
            text += f"- ID: `{user['user_id']}`, –ù–∏–∫: {display_name}, –†–æ–ª—å: {user['role']}\n"

    keyboard = create_back_to_admin_keyboard()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –∑–∞–∫–∞–∑—ã üì¶" (–ó–∞–≥–ª—É—à–∫–∞)
@router.callback_query(F.data == "admin_all_orders")
async def all_orders_handler(callback: CallbackQuery):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
    await callback.answer(LEXICON["admin_all_orders_title"], show_alert=True)

# --- –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¢–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω) ---

# 1. –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /grant_admin <user_id>. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä IsMainAdmin.
@router.message(Command("grant_admin"), IsMainAdmin())
async def cmd_grant_admin(message: Message, state: FSMContext):
    args = message.text.split()
    if len(args) < 2:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ, –∑–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ID
        await message.answer(LEXICON["admin_grant_prompt"])
        await state.set_state(AdminStates.waiting_for_user_id_to_grant)
        return

    try:
        user_id_to_grant = int(args[1])
        await process_grant(message, user_id_to_grant, state)
    except ValueError:
        await message.answer(LEXICON["admin_grant_invalid_id"])


# 2. –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É üõ†". –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä IsMainAdmin.
@router.callback_query(F.data == "admin_grant", IsMainAdmin())
async def grant_admin_button_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(LEXICON["admin_grant_prompt"])
    await state.set_state(AdminStates.waiting_for_user_id_to_grant)
    await callback.answer()

# 3. –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä IsMainAdmin.
@router.message(StateFilter(AdminStates.waiting_for_user_id_to_grant), IsMainAdmin())
async def process_grant_admin_id(message: Message, state: FSMContext):
    try:
        user_id_to_grant = int(message.text)
        await process_grant(message, user_id_to_grant, state)

    except ValueError:
        await message.answer(LEXICON["admin_grant_invalid_id"])
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ ID –∑–∞–Ω–æ–≤–æ

async def process_grant(message: Message, user_id_to_grant: int, state: FSMContext):
    """–õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –ø—Ä–∞–≤
    if user_id_to_grant not in users_db:
            await message.answer(LEXICON["admin_user_not_found"].format(user_id=user_id_to_grant))
            return

    if grant_admin_role(user_id_to_grant):
        await message.answer(LEXICON["admin_grant_success"].format(user_id=user_id_to_grant))
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ (–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        await show_admin_menu(message, state)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–µ—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ì–ª–∞–≤–Ω—ã–º
# –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º IsMainAdmin –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ IsAdmin (—Ñ–∏–ª—å—Ç—Ä —Ä–æ—É—Ç–µ—Ä–∞) –ø—Ä–æ—à–µ–ª.
@router.message(Command("grant_admin"))
@router.callback_query(F.data == "admin_grant")
async def access_denied_main_admin(event: Message | CallbackQuery):
    text = LEXICON["admin_only_main_can_grant"]
    if isinstance(event, Message):
        await event.answer(text)
    else:
        await event.answer(text, show_alert=True)