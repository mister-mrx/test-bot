import logging
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from bot.keyboards.fsm_keyboards import (
    get_service_choice_keyboard, get_person_check_subservice_keyboard,
    get_contact_method_keyboard
)
from bot.lexicon.lexicon_ru import LEXICON
from bot.models.data_store import add_order
from bot.states.states import ApplicationStates
from bot.config import config

router = Router()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)
@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        LEXICON["fsm_cancel"],
        reply_markup=ReplyKeyboardRemove(),
    )

# --- –õ–æ–≥–∏–∫–∞ FSM (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞) ---

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
def get_button_text(callback: CallbackQuery) -> Optional[str]:
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for btn in row:
                if btn.callback_data == callback.data:
                    return btn.text
    return None

# –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —É—Å–ª—É–≥–∏
@router.callback_query(ApplicationStates.choosing_service, F.data.startswith("service_"))
async def process_service_choice(callback: CallbackQuery, state: FSMContext):
    service_text = get_button_text(callback)
    if service_text:
        await state.update_data(service_category=service_text)

    if callback.data == "service_person_check":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É."
        )
        await state.set_state(ApplicationStates.choosing_subservice)
        await callback.message.edit_reply_markup(reply_markup=get_person_check_subservice_keyboard())
    else:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å 1: –û –∫–æ–º –∏–ª–∏ –æ —á–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?"
        )
        await state.set_state(ApplicationStates.collecting_info_object)
    await callback.answer()

# –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –ø–æ–¥—É—Å–ª—É–≥–∏
@router.callback_query(ApplicationStates.choosing_subservice, F.data.startswith("sub_"))
async def process_subservice_choice(callback: CallbackQuery, state: FSMContext):
    sub_service_text = get_button_text(callback)
    if sub_service_text:
        await state.update_data(sub_service=sub_service_text)

    await callback.message.edit_text(
        "–í–æ–ø—Ä–æ—Å 1: –û –∫–æ–º –∏–ª–∏ –æ —á–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?"
    )
    await state.set_state(ApplicationStates.collecting_info_object)
    await callback.answer()

# –≠—Ç–∞–ø—ã 4 –∏ 5: –°–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@router.message(ApplicationStates.collecting_info_object)
async def process_info_object(message: Message, state: FSMContext):
    await state.update_data(object_info=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –æ–±—Ä–∞—â–µ–Ω–∏—è?")
    await state.set_state(ApplicationStates.collecting_info_goal)

@router.message(ApplicationStates.collecting_info_goal)
async def process_info_goal(message: Message, state: FSMContext):
    await state.update_data(main_goal=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 3: –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å?")
    await state.set_state(ApplicationStates.collecting_info_existing)

@router.message(ApplicationStates.collecting_info_existing)
async def process_info_existing(message: Message, state: FSMContext):
    await state.update_data(existing_info=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 4: –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏?")
    await state.set_state(ApplicationStates.collecting_info_budget)

@router.message(ApplicationStates.collecting_info_budget)
async def process_info_budget(message: Message, state: FSMContext):
    await state.update_data(budget_timeline=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 5: –í–∞—à–µ –∏–º—è.")
    await state.set_state(ApplicationStates.collecting_contact_name)

@router.message(ApplicationStates.collecting_contact_name)
async def process_contact_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–í–æ–ø—Ä–æ—Å 6: –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")
    await state.set_state(ApplicationStates.collecting_contact_number)

@router.message(ApplicationStates.collecting_contact_number)
async def process_contact_number(message: Message, state: FSMContext):
    await state.update_data(user_contact=message.text)
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 7: –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç?",
        reply_markup=get_contact_method_keyboard()
    )
    await state.set_state(ApplicationStates.collecting_contact_method)

# –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(ApplicationStates.collecting_contact_method, F.data.startswith("contact_"))
async def process_contact_method(callback: CallbackQuery, state: FSMContext, bot: Bot):
    preferred_method_text = get_button_text(callback)
    if preferred_method_text:
        await state.update_data(preferred_method=preferred_method_text)

    user_data = await state.get_data()
    await state.clear()

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î (–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ) ---
    order_id = add_order(callback.from_user.id, user_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! ID –ó–∞–∫–∞–∑–∞: #{order_id}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_data.get('user_name', '–ù/–î')}\n"
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ ...
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ì–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await bot.send_message(config.MAIN_ADMIN_ID, summary_text)
    except Exception as e:
        logging.error(f"Failed to send message to main admin: {e}")

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ (ID: #{order_id}). –í–≤–µ–¥–∏—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
    )
    await callback.answer()