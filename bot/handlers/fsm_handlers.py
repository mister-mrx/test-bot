import logging
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from bot.keyboards.fsm_keyboards import (
    get_service_choice_keyboard, get_person_check_subservice_keyboard
)
from bot.lexicon.lexicon_ru import LEXICON, FSM_QUESTIONS
from bot.models.data_store import add_order
from bot.states.states import ApplicationStates
from bot.config import config
from bot.keyboards.menu_keyboards import create_main_menu_keyboard # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"

router = Router()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)
@router.message(Command("cancel"))
@router.callback_query(F.data == "fsm_cancel")
async def cancel_handler(event: Message | CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        if isinstance(event, CallbackQuery):
            await event.answer()
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    
    message_to_send = LEXICON["fsm_cancel"]
    
    if isinstance(event, Message):
        await event.answer(
            message_to_send,
            reply_markup=ReplyKeyboardRemove(),
        )
    elif isinstance(event, CallbackQuery):
        try:
            await event.message.edit_text(
                message_to_send,
                reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        except: # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
             await event.message.answer(
                message_to_send,
                reply_markup=ReplyKeyboardRemove(),
            )
        await event.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
def get_button_text(callback: CallbackQuery) -> Optional[str]:
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for btn in row:
                if btn.callback_data == callback.data:
                    return btn.text
    return None

# –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π —É—Å–ª—É–≥–∏
@router.callback_query(ApplicationStates.choosing_service, F.data.startswith("service_"))
async def process_service_choice(callback: CallbackQuery, state: FSMContext):
    service_text = get_button_text(callback)
    if service_text:
        await state.update_data(service_category=service_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.set_state(ApplicationStates.answering_questions)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞—á–Ω–µ–º —Å 0)
    await state.update_data(question_index=0)

    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞
    first_question = FSM_QUESTIONS[0]['text']
    await callback.message.edit_text(first_question)

    await callback.answer()


# –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ FSM_QUESTIONS
@router.message(ApplicationStates.answering_questions)
async def process_answer(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    question_index = data.get('question_index', 0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç. –ö–ª—é—á –±–µ—Ä–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
    question_key = FSM_QUESTIONS[question_index]['key']
    await state.update_data({question_key: message.text})

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_index = question_index + 1

    if next_question_index < len(FSM_QUESTIONS):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        await state.update_data(question_index=next_question_index)
        next_question_text = FSM_QUESTIONS[next_question_index]['text']
        await message.answer(next_question_text)
    else:
        # –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        await state.update_data(user_name=message.from_user.full_name)
        user_data = await state.get_data()
        await state.clear()

        order_id = add_order(message.from_user.id, user_data)
        
        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
        user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
        
        summary_lines = [
            f"‚úÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!* ID: `#{order_id}`",
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {user_info}",
            "---",
            f"‚ñ∂Ô∏è *–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:* {user_data.get('service_category', '–ù/–î')}",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        for question in FSM_QUESTIONS:
            key = question['key']
            answer = user_data.get(key, '–ù/–î')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º > –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–∞–≥–ª—è–¥–Ω–µ–µ
            summary_lines.append(f"*{question['text']}*\n> {answer}")

        summary_text = "\n\n".join(summary_lines)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(config.MAIN_ADMIN_ID, summary_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"Failed to send message to main admin: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if config.GROUP_CHAT_ID:
            try:
                await bot.send_message(config.GROUP_CHAT_ID, summary_text, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"Failed to send message to group chat: {e}")

        await message.answer(
            LEXICON["fsm_finish"].format(order_id=order_id)
        )
